//------------------------------------------------------------------------------
// <auto-generated>
//     Denna kod har genererats av ett verktyg.
//     Körtidsversion:4.0.30319.34209
//
//     Ändringar i denna fil kan orsaka fel och kommer att förloras om
//     koden återgenereras.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections;
using UnityEngine;


namespace AssemblyCSharp
{
	[RequireComponent (typeof(NavMeshAgent)), RequireComponent (typeof(Vision))]
	public abstract class BaseAI : MonoBehaviour
	{
		//Not Changeing
		public float  soundDetectionRange;
		public float holdTime;
		public float stoppingDistance;
		public bool allwaysReactToSound;

		//Variables
		[HideInInspector]
		public Transform
			player;
		[HideInInspector]
		public State
			state;
		[HideInInspector]
		public Vector3
			target;
		[HideInInspector]
		public float
			t;
		[HideInInspector]
		public NavMeshAgent
			nav;
		[HideInInspector]
		public Vision
			vision;

		private NavMeshPath path;
		private RaycastHit hit;

		public BaseAI ()
		{
		}

		public virtual void Awake ()
		{
			nav = GetComponent<NavMeshAgent> ();
			vision = GetComponent<Vision> ();
			player = GameObject.FindGameObjectWithTag ("Player").transform;
			path = new NavMeshPath ();
		}

		void Update ()
		{
			AIUpdate ();
			if (state == State.Alert) {
				if (t > holdTime) {
					ChangeState (State.Moveing);
					t = 0f;
				} else {
					t += Time.deltaTime;
				}
			} else if (state == State.Looking) {
				Look ();
			} else if (state == State.Moveing) {
				Move ();
			} else if (state == State.Passive) {
				Passive ();
			} else if (state == State.Tracing) {
				Trace ();
			} else {
				Debug.LogError ("Unknown state", gameObject);
			}
		}


		//When a sound is played
		public void Sound (Sound sound)
		{
			Sound (sound.GetPosition (), sound.GetVolume ());
		}

		public void Sound (Vector3 position, float volume)
		{
			if (state > State.Alert)
				return;

			NavMesh.CalculatePath (transform.position, position, NavMesh.AllAreas, path);
			Physics.Raycast (transform.position, position, out hit, Vector3.Distance (position, transform.position));
			if (hit.distance >= Vector3.Distance (position, transform.position) || SoundLength.GetPathLength (path, transform.position) <= soundDetectionRange * volume) {
				target = position;
				if (allwaysReactToSound)
					ForceChangeState (State.Alert);
				else
					ChangeState (State.Alert);
			}
		}

		public bool ChangeState (State newState)
		{
			if (newState > state) {
				state = newState;
			}
			return (newState > state);
		}

		public void ForceChangeState (State newState)
		{
			state = newState;
		}

		public abstract void AIUpdate ();

		public abstract void Move ();
	
		public abstract void Look ();

		public abstract void Passive ();

		public abstract void Trace ();
	}
}

